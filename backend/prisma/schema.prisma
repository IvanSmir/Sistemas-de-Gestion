// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String            @id @default(uuid())
  fullName        String
  userName        String            @unique
  password        String
  roles           String[]          @default(["USER"])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Positions       Positions[]
  Person          Person[]
  Employees       Employees[]
  FamilyTypes     FamilyTypes[]
  FamilyMembers   FamilyMembers[]
  IncomeTypes     IncomeTypes[]
  EmployeeDetails EmployeeDetails[]
  Income          Income[]
  ExpenseTypes    ExpenseTypes[]
  Expenses        Expenses[]
  isDeleted       Boolean           @default(false)
  isActive        Boolean           @default(true)
  PayrollPeriods  PayrollPeriods[]
  PayrollItems    PayrollItems[]
  BasicConfig     BasicConfig[]
  PayrollDetails  PayrollDetails[]
}

model Positions {
  id              String            @id @default(uuid())
  name            String            @unique
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            Users             @relation(fields: [userId], references: [id])
  userId          String
  EmployeeDetails EmployeeDetails[]
  isDeleted       Boolean           @default(false)
}

model Person {
  id           String          @id @default(uuid())
  name         String
  address      String
  phone        String?
  email        String?
  ciRuc        String          @unique
  birthDate    DateTime
  gender       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         Users           @relation(fields: [userId], references: [id])
  userId       String
  Employee     Employees?
  FamilyMember FamilyMembers[]
  isDeleted    Boolean         @default(false)
}

model Employees {
  id              String            @id @default(uuid())
  person          Person            @relation(fields: [personId], references: [id])
  personId        String            @unique
  enterDate       DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            Users             @relation(fields: [userId], references: [id])
  userId          String
  FamilyMember    FamilyMembers[]
  EmployeeDetails EmployeeDetails[]
  Income          Income[]
  Expenses        Expenses[]
  isDeleted       Boolean           @default(false)
  PayrollDetails  PayrollDetails[]
}

model FamilyTypes {
  id           String          @id @default(uuid())
  name         String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         Users           @relation(fields: [userId], references: [id])
  userId       String
  FamilyMember FamilyMembers[]
  isDeleted    Boolean         @default(false)
}

model FamilyMembers {
  id           String      @id @default(uuid())
  employee     Employees   @relation(fields: [employeeId], references: [id])
  employeeId   String
  familyType   FamilyTypes @relation(fields: [familyTypeId], references: [id])
  familyTypeId String
  person       Person      @relation(fields: [personId], references: [id])
  personId     String
  user         Users       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isDeleted    Boolean     @default(false)
}

model EmployeeDetails {
  id         String    @id @default(uuid())
  employee   Employees @relation(fields: [employeeId], references: [id])
  employeeId String
  position   Positions @relation(fields: [positionId], references: [id])
  positionId String
  salary     Float
  salaryType String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       Users     @relation(fields: [userId], references: [id])
  userId     String
  isDeleted  Boolean   @default(false)
  isActive   Boolean   @default(true)
}

model IncomeTypes {
  id         String   @id @default(uuid())
  name       String   @unique
  deductible Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       Users    @relation(fields: [userId], references: [id])
  userId     String
  Income     Income[]
  isDeleted  Boolean  @default(false)
}

model Income {
  id           String      @id @default(uuid())
  employee     Employees   @relation(fields: [employeeId], references: [id])
  employeeId   String
  incomeType   IncomeTypes @relation(fields: [incomeTypeId], references: [id])
  incomeTypeId String
  amount       Float
  date         DateTime
  active       Boolean
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         Users       @relation(fields: [userId], references: [id])
  userId       String
  isDeleted    Boolean     @default(false)
}

model ExpenseTypes {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      Users      @relation(fields: [userId], references: [id])
  userId    String
  Expenses  Expenses[]
  isDeleted Boolean    @default(false)
}

model Expenses {
  id            String       @id @default(uuid())
  employee      Employees    @relation(fields: [employeeId], references: [id])
  employeeId    String
  expenseType   ExpenseTypes @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId String
  amount        Float
  date          DateTime
  active        Boolean
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          Users        @relation(fields: [userId], references: [id])
  userId        String
  isDeleted     Boolean      @default(false)
}

model PayrollDetails {
  id           String         @id @default(uuid())
  period       PayrollPeriods @relation(fields: [periodId], references: [id])
  periodId     String
  payrollItems PayrollItems[]
  employee     Employees      @relation(fields: [employeeId], references: [id])
  employeeId   String
  amount       Float?
  isVerified   Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  user         Users          @relation(fields: [userId], references: [id])
  userId       String
}

model PayrollItems {
  id              String         @id @default(uuid())
  payrollDetail   PayrollDetails @relation(fields: [payrollDetailId], references: [id])
  payrollDetailId String
  isIncome        Boolean
  amount          Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            Users          @relation(fields: [userId], references: [id])
  userId          String
  isDeleted       Boolean        @default(false)
  isIps           Boolean        @default(false)
  isBonification  Boolean        @default(false)
}

model PayrollPeriods {
  id                         String           @id @default(uuid())
  periodStart                DateTime
  periodEnd                  DateTime?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  user                       Users            @relation(fields: [userId], references: [id])
  userId                     String
  payrollDetails             PayrollDetails[]
  isDeleted                  Boolean          @default(false)
  isEnded                    Boolean          @default(false)
  DetailsWithoutVerification Int              @default(0)
  totalAmount                Float?
}

model BasicConfig {
  id        String   @id @default(uuid())
  name      String   @unique
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  isDeleted Boolean  @default(false)
}

model AccountingEntry {
  id          String   @id @default(uuid())
  paymentDate DateTime @default(now())
  netAmount   Float
  type        String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
}
